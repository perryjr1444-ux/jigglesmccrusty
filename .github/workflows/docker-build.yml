name: Docker Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate docker-compose
        run: docker-compose config --quiet

      - name: Check bootstrap script
        run: |
          chmod +x scripts/bootstrap.sh
          bash -n scripts/bootstrap.sh

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        service: [ai-soc, frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ${{ matrix.service }} image
        run: |
          if [ "${{ matrix.service }}" = "ai-soc" ]; then
            docker build -t ai-soc:test ./ai_soc
          else
            docker build -t frontend:test .
          fi

      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.service }}:test
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'
        continue-on-error: true

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'
        continue-on-error: true

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run bootstrap script
        run: |
          chmod +x scripts/bootstrap.sh
          ./scripts/bootstrap.sh

      - name: Start services
        run: docker-compose up -d

      - name: Wait for services
        run: |
          sleep 30
          docker-compose ps

      - name: Initialize services
        run: ./scripts/bootstrap.sh --init-services

      - name: Health checks
        run: |
          # Wait for services to be fully ready
          sleep 20
          
          # Check AI SOC health
          curl -f http://localhost:9000/health || exit 1
          
          # Check frontend health
          curl -f http://localhost:8000/health || exit 1

      - name: Show service logs
        if: failure()
        run: docker-compose logs

      - name: Cleanup
        if: always()
        run: docker-compose down -v
